#+TITLE: My Emacs Init Org File 
#+STARTUP: indent
#+LANGUAGE: en

This file is my emacs configuration file written in org mode. I
believe this will be a better way for me to keep things organized. 

* Packages
** Initialize Archives
#+begin_src emacs-lisp :tangle yes
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+end_src
** Load Paths
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path 
(concat user-emacs-directory "cmake-ide"))
(add-to-list 'load-path 
(concat user-emacs-directory "irony-mode"))
(add-to-list 'load-path 
(concat user-emacs-directory "sow"))
(add-to-list 'load-path
(concat user-emacs-directory "workgroups2/src"))
(add-to-list 'load-path
(concat user-emacs-directory "setup-linum"))
;; (add-to-list 'load-path
;; (concat user-emacs-directory "chess"))

(add-to-list 'load-path "/home/nidish96/.emacs.d/rtags/src")
(add-to-list 'load-path "/home/nidish96/.cask")
#+end_src
** Cask
#+begin_src emacs-lisp :tangle yes
(require 'cask)
(cask-initialize)
#+end_src
** pallet
#+begin_src emacs-lisp :tangle yes
(require 'pallet)
(pallet-mode t)
#+end_src
* Display and Accessibility
** Misc Displays
#+begin_src emacs-lisp :tangle yes
  (display-battery-mode t)
  (display-time-mode t)

  ;; (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)

  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)
#+end_src
* Shortcuts
** Keys
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c C-x c") 'comment-region)
(global-set-key (kbd "C-c C-x u") 'uncomment-region)
(global-set-key (kbd "M-s M-s") 'shell-script-mode)
(global-set-key (kbd "M-s RET") 'ansi-term)
(global-set-key (kbd "C-x t") 'transpose-frame)
(global-set-key (kbd "C-x c") 'compile)
(global-set-key (kbd "C-x p") (kbd "C-u -1 C-x o"))
(global-set-key (kbd "C-c C-x k") 'kill-emacs)

(define-key emacs-lisp-mode-map (kbd "C-c C-e") 'eval-region)
(define-key emacs-lisp-mode-map (kbd "C-c C-b") 'eval-buffer)
(defalias 'yes-or-no-p 'y-or-n-p)

(require 'cc-mode)
(define-key c++-mode-map (kbd "C-c RET") 'compile)
(define-key c-mode-map (kbd "C-c RET") 'compile)
#+end_src
** File Extensions
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.cfg\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.gp\\'" . gnuplot-mode))
(add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
#+end_src
* Org Mode
#+begin_src emacs-lisp :tangle yes
(require 'org)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-co" 'org-indent-mode)
(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-log-done 'time)
(setq org-log-done 'note)
(add-to-list 'org-latex-packages-alist '("margin=1in" "geometry" nil))

(setq org-stuck-projects
      '("+PROJECT/-MAYBE-DONE" ("TODO" "STARTED") nil "\\<IGNORE\\>"))
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)

(add-hook 'org-mode-hook
	  (lambda ()
	    (org-bullets-mode t)))

(setq org-ellipsis "↴")
;; ▼, ↴, ⬎, ⤷, ⋱, ⤵
#+end_src
* TeX
** AucTeX
*** Setup
#+begin_src emacs-lisp :tangle yes
  (setq LaTeX-command "latex")
  (setq LaTeX-section-label
   (quote
    (("part" . "part:")
     ("chapter" . "chap:")
     ("section" . "sec:")
     ("subsection" . "ssec:")
     ("subsubsection" . "sssec:"))))

  (require 'tex)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (require 'tex-fold)
  (add-hook 'TeX-mode-hook
            (lambda ()
              (TeX-fold-mode 1)
              (add-hook 'find-file-hook 'TeX-fold-buffer t t)
              (add-hook 'after-change-functions
                        (lambda (start end oldlen)
                          (when (= (- end start) 1)
                            (let ((char-point
                                   (buffer-substring-no-properties
                                    start end)))
                              (when (or (string= char-point "}")
                                        (string= char-point "$"))
                                (TeX-fold-paragraph))
                              )))
                        t t)))
  (add-hook 'TeX-mode-hook #'auto-fill-mode)

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (add-hook 'TeX-mode 'auto-fill-mode)

  (setq LaTeX-includegraphics-read-file 'LaTeX-includegraphics-read-file-relative)
#+end_src
*** Latexmk Support
#+begin_src emacs-lisp :tangle yes
(require 'auctex-latexmk)
(auctex-latexmk-setup)
#+end_src
** RefTeX
#+begin_src emacs-lisp :tangle yes
(add-hook 'LaTeX-mode-hook 'reftex-mode)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
#+end_src
* Pdf-tools
** Setup
#+begin_src emacs-lisp :tangle yes
(pdf-tools-install)

#+end_src
** Bugfixes
*** Other window scrolling
#+begin_src emacs-lisp :tangle yes
(require 'sow)
(sow-mode t)
#+end_src
*** Line numbering
#+begin_src emacs-lisp :tangle yes
  (require 'setup-linum)
  ;; (add-hook 'after-init-hook 
  ;; (lambda ()
  ;; (global-linum-mode t)
  ;; (linum-on t))
#+end_src
** Make pdf-tools default viewer for TeX compile
#+begin_src emacs-lisp :tangle yes
(setq TeX-view-program-selection '((output-pdf "PDF Tools")) TeX-source-correlate-start-server t)
(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'TeX-revert-document-buffer)

(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
(add-hook 'TeX-mode 'pdf-sync-minor-mode)
(define-key TeX-mode-map (kbd "C-c M-v") 'pdf-sync-display-pdf)
(define-key TeX-mode-map (kbd "C-c v") 'pdf-sync-forward-search)
#+end_src
* Helm
#+begin_src emacs-lisp :tangle yes
(require 'helm-config)
(require 'helm)
(require 'helm-ls-git)
(require 'helm-ctest)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-c t") 'helm-ctest)
(define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
(setq
 helm-split-window-inside-p           t
   ; open helm buffer inside current window,
   ; not occupy whole other window
 helm-move-to-line-cycle-in-source     t
   ; move to end or beginning of source when
   ; reaching top or bottom of source.
 helm-ff-search-library-in-sexp        t
   ; search for library in `require' and `declare-function' sexp.
 helm-scroll-amount                    8
   ; scroll 8 lines other window using M-<next>/M-<prior>
 helm-ff-file-name-history-use-recentf t
 ;; Allow fuzzy matches in helm semantic
 helm-semantic-fuzzy-match             t
 helm-imenu-fuzzy-match                t
 helm-echo-input-in-header-line        t )

(defun spacemacs//helm-hide-minibuffer-maybe ()
  "Hide minibuffer in Helm session if we use the header line as input field."
  (when (with-helm-buffer helm-echo-input-in-header-line)
    (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
      (overlay-put ov 'window (selected-window))
      (overlay-put ov 'face
		   (let ((bg-color (face-background 'default nil)))
		     `(:background ,bg-color :foreground ,bg-color)))
      (setq-local cursor-type nil))))

(add-hook 'helm-minibuffer-set-up-hook
	  'spacemacs//helm-hide-minibuffer-maybe)

;; Have helm automaticaly resize the window
(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(helm-mode 1)
#+end_src

* Miscellaneous Utilities
** Chess
#+begin_src emacs-lisp :tangle yes
;; (require 'chess)
;; (autoload 'chess "chess" "Play a game of chess" t)
#+end_src
** Langtool
#+begin_src emacs-lisp :tangle yes
(require 'langtool)
(setq langtool-language-tool-jar "/home/nidish96/.emacs.d/LanguageTool-3.9/languagetool-commandline.jar")

(global-set-key "\C-x4w" 'langtool-check)
(global-set-key "\C-x4W" 'langtool-check-done)
(global-set-key "\C-x4l" 'langtool-switch-default-language)
(global-set-key "\C-x44" 'langtool-show-message-at-point)
(global-set-key "\C-x4c" 'langtool-correct-buffer)

(setq langtool-default-language "en-US")
#+end_src
** Flyspell Mode
#+begin_src emacs-lisp :tangle yes
(require 'flyspell)
(setq flyspell-issue-welcome-flag nil)

(define-key flyspell-mode-map (kbd "<f8>") 'helm-flyspell-correct)
(global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
(global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
(global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
(global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
(defun flyspell-check-next-highlighted-word ()
  "Custom function to spell check next highlighted word."
  (interactive)
  (flyspell-goto-next-error)
  (ispell-word))
;; (add-hook 'c++-mode-hook  'flyspell-prog-mode)
;; (add-hook 'c-mode-common-hook 'flyspell-prog-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)

;; (if (fboundp 'prog-mode)
;;     (add-hook 'prog-mode-hook 'flyspell-prog-mode)
;;   (dolist (hook '(lisp-mode-hook emacs-lisp-mode-hook scheme-mode-hook
;; 				 clojure-mode-hook ruby-mode-hook yaml-mode
;; 				 python-mode-hook shell-mode-hook php-mode-hook
;; 				 css-mode-hook haskell-mode-hook caml-mode-hook
;; 				 nxml-mode-hook crontab-mode-hook perl-mode-hook
;; 				 tcl-mode-hook javascript-mode-hook))
;;     (add-hook hook 'flyspell-prog-mode)))

(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  (add-hook hook (lambda () (flyspell-mode -1))))
#+end_src
** Visible Bell
#+begin_src emacs-lisp :tangle yes
(setq visible-bell 1)
#+end_src
** Speedbar
#+begin_src emacs-lisp :tangle yes
(setq speedbar-show-unknown-files t)
(global-set-key (kbd "C-c s") 'sr-speedbar-toggle)
#+end_src
** Volatile Highlights
#+begin_src emacs-lisp :tangle yes
(require 'volatile-highlights)
(volatile-highlights-mode 1)
#+end_src
** Undo Tree
#+begin_src emacs-lisp :tangle yes
(require 'undo-tree)
(add-hook 'after-init-hook 'undo-tree-mode)
#+end_src
** Workgroups2
#+begin_src emacs-lisp :tangle yes
;; (require 'workgroups2)
;; (workgroups-mode 1)
#+end_src
** Duplicate-thing
#+begin_src emacs-lisp :tangle yes
  (require 'duplicate-thing)
  (global-set-key (kbd "M-c") 'duplicate-thing)
#+end_src
** Golden-Ratio Mode
#+begin_src emacs-lisp :tangle yes
(require 'golden-ratio)
(setq golden-ratio-exclude-modes '("ediff-mode"
                                   "gud-mode"
                                   "gdb-locals-mode"
                                   "gdb-registers-mode"
                                   "gdb-breakpoints-mode"
                                   "gdb-threads-mode"
                                   "gdb-frames-mode"
                                   "gdb-inferior-io-mode"
                                   "gud-mode"
                                   "gdb-inferior-io-mode"
                                   "gdb-disassembly-mode"
                                   "gdb-memory-mode"
                                   "magit-log-mode"
                                   "magit-reflog-mode"
                                   "magit-status-mode"
                                   "IELM"
                                   "eshell-mode"
				   "dired-mode"
				   "emaxima-mode"
				   "compilation"
				   ))
;; "latex-mode"
;; "pdf-view-mode"

(defun pl/helm-alive-p ()
  "Inhibit golden-ratio if helm is active."
  (if (boundp 'helm-alive-p)
      (symbol-value 'helm-alive-p)))
(add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)
(golden-ratio-mode 1)
#+end_src
** nyan-mode
#+begin_src emacs-lisp :tangle yes
(require 'nyan-mode)
;; (case window-system
;;   ((x w32) (setq nyan-mode t) ) )
(setq nyan-mode t)
(setq nyan-animate-nyancat t)
(nyan-refresh)
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp :tangle yes
(require 'multiple-cursors)
#+end_src
** Multifiles
#+begin_src emacs-lisp :tangle yes
(require 'multifiles)
(global-set-key (kbd "C-x m") 'mc/edit-lines)
#+end_src
** EMMS
#+begin_src emacs-lisp :tangle yes
(require 'emms-setup)
(emms-all)
(emms-default-players)
#+end_src
** dired+
#+begin_src emacs-lisp :tangle yes
(require 'dired+)
(setq diredp-hide-details-initially-flag nil)
#+end_src
* Programming Utilities
** Completion
*** Irony
#+begin_src emacs-lisp :tangle yes
(require 'irony)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(defun my-irony-mode-hook ()
  "."
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+end_src
*** Yasnippet
#+begin_src emacs-lisp :tangle yes
(require 'yasnippet)
(add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets/")
(add-to-list 'yas-snippet-dirs "/home/nidish96/.emacs.d/yasnippet-ess")
(yas-global-mode 1)
(yas-reload-all)
#+end_src
*** Company Irony Completion
#+begin_src emacs-lisp :tangle yes
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)
(require 'company-rtags)

(setq company-backends (delete 'company-semantic
			       company-backends))
;; (setq company-backends (delete 'company-capf
;; 			       company-backends))
(require 'company-irony-c-headers)
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers company-irony)))
;; tab-completion with no delay
(setq company-idle-delay 0)
(define-key c-mode-map [C-tab] 'company-complete)
(define-key c++-mode-map [C-tab] 'company-complete)

(eval-after-load 'company
  '(progn
     (define-key company-mode-map (kbd "C-:") 'helm-company)
     (define-key company-active-map (kbd "C-:") 'helm-company)))
(define-key company-active-map (kbd "C-n") (lambda () (interactive) (company-complete-common-or-cycle 1)))
(define-key company-active-map (kbd "C-p") (lambda () (interactive) (company-complete-common-or-cycle -1)))

(defvar company-mode/enable-yas t
  "Enable yasnippet for all backends.")

;;(defun company-mode/backend-with-yas (backend)
;;  (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
;;      backend
;;    (append (if (consp backend) backend (list backend))
;;            '(:with company-yasnippet))))
;;(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends));;

;; (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)

;; company-auctex
(company-auctex-init)

;; company-quickhelp
(require 'company-quickhelp)
(company-quickhelp-mode 1)
#+end_src
** IDEs
*** GGTags
#+begin_src emacs-lisp :tangle yes
;; (require 'ggtags)
;; (add-hook 'c-mode-common-hook
;;	  (lambda ()
;;	    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
;;	      (ggtags-mode 1))))

;; (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
;; (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
;; (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
;; (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
;; (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
;; (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)

;; (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
;; (add-hook 'dired-mode-hook 'ggtags-mode)
#+end_src
*** Cmake-ide
**** Rtags
#+begin_src emacs-lisp :tangle yes
(require 'rtags)
(setq rtags-autostart-diagnostics t)
(rtags-diagnostics)
(setq rtags-completions-enabled t)
(rtags-enable-standard-keybindings)

;; (require 'rtags-helm)
;; (setq rtags-use-helm t)
(setq rtags-use-helm 0)
(eval-after-load 'cc-mode
  '(progn
     (require 'rtags)
     (mapc (lambda (x)
             (define-key c-mode-base-map
               (kbd (concat "C-c r " (car x))) (cdr x)))
           '(("." . rtags-find-symbol-at-point)
             ("," . rtags-find-references-at-point)
             ("v" . rtags-find-virtuals-at-point)
             ("V" . rtags-print-enum-value-at-point)
             ("/" . rtags-find-all-references-at-point)
             ("Y" . rtags-cycle-overlays-on-screen)
             (">" . rtags-find-symbol)
             ("<" . rtags-find-references)
             ("-" . rtags-location-stack-back)
             ("+" . rtags-location-stack-forward)
             ("D" . rtags-diagnostics)
             ("G" . rtags-guess-function-at-point)
             ("p" . rtags-set-current-project)
             ("P" . rtags-print-dependencies)
             ("e" . rtags-reparse-file)
             ("E" . rtags-preprocess-file)
             ("R" . rtags-rename-symbol)
             ("M" . rtags-symbol-info)
             ("S" . rtags-display-summary)
             ("O" . rtags-goto-offset)
             (";" . rtags-find-file)
             ("F" . rtags-fixit)
             ("X" . rtags-fix-fixit-at-point)
             ("B" . rtags-show-rtags-buffer)
             ("I" . rtags-imenu)
             ("T" . rtags-taglist)
	     ("q" . rtags-quit-rdm) ))))
#+end_src

**** Cmake-IDE
#+begin_src emacs-lisp :tangle yes
(require 'cmake-ide)
(require 'rtags)
(cmake-ide-setup)
(setq cmake-ide-flags-c++ (append '("std-c++11")))
(global-set-key (kbd "C-c m") 'cmake-ide-compile)

;; (defun maybe-cmake-project-hook ()
;;  "Enable cmake project mode if CMakeLists.txt exists."
;;  (if (file-exists-p "CMakeLists.txt") (cmake-project-mode)))
;; (add-hook 'c-mode-hook 'maybe-cmake-project-hook)
;; (add-hook 'c++-mode-hook 'maybe-cmake-project-hook)
#+end_src
*** ElPy
#+begin_src emacs-lisp :tangle yes
(elpy-enable)
#+end_src
*** Octave
#+begin_src emacs-lisp :tangle yes
(require 'octave)
(define-key octave-mode-map (kbd "C-c C-c") 'octave-mode-buffer)
#+end_src
*** Julia Mode
#+begin_src emacs-lisp :tangle yes
(require 'julia-mode)
(defun my-julia-mode-hooks ()
  (require 'julia-shell-mode))
(add-hook 'julia-mode-hook 'my-julia-mode-hooks)
(define-key julia-mode-map (kbd "C-c C-c") 'julia-shell-run-region-or-line)
(define-key julia-mode-map (kbd "C-c C-s") 'julia-shell-save-and-go)
#+end_src
*** ESS for R
#+begin_src emacs-lisp :tangle yes
(add-hook 'inferior-ess-mode-hook
    '(lambda nil
          (define-key inferior-ess-mode-map [\C-up]
              'comint-previous-matching-input-from-input)
          (define-key inferior-ess-mode-map [\C-down]
              'comint-next-matching-input-from-input)
          (define-key inferior-ess-mode-map [\C-x \t]
              'comint-dynamic-complete-filename)
     )
 )
#+end_src
*** Cmake Mode
#+begin_src emacs-lisp :tangle yes
(require 'cmake-mode)
#+end_src
*** imaxima
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "/usr/local/share/maxima/branch_5_41_base_94_g852f8857f/emacs")
(autoload 'maxima-mode "maxima" "Maxima mode" t)
(autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
(autoload 'maxima "maxima" "Maxima interaction" t)
(autoload 'imath-mode "imath" "Imath mode for math formula input" t)
(setq imaxima-use-maxima-mode-flag t)
(add-to-list 'auto-mode-alist '("\\.ma[cx]" . maxima-mode))
(setq imaxima-fnt-size "Large")

;; (define-key maxima-mode-map [C-tab] 'maxima-complete)
;; (define-key inferior-maxima-mode-map [(tab)] 'maxima-complete)
(autoload 'emaxima-mode "emaxima" "Emaxima" t)
(add-hook 'emaxima-mode-hook 'emaxima-mark-file-as-emaxima)
(setq emaxima-abbreviations-allowed t)
#+end_src
** Utils
*** Flycheck
#+begin_src emacs-lisp :tangle yes
(require 'flycheck)
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
(global-flycheck-mode t)
;; (require 'flycheck-pyflakes)
(require 'helm-flycheck) ;; Not necessary if using ELPA package
(eval-after-load 'flycheck
  '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))

(require 'flycheck-rtags)
(defun my-flycheck-rtags-setup ()
  "Configure flycheck-rtags for better experience."
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-check-syntax-automatically nil)
  (setq-local flycheck-highlighting-mode nil))
;; c-mode-common-hook is also called by c++-mode
(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
#+end_src

*** Magit
#+begin_src emacs-lisp :tangle yes
  (require 'magit)
  (global-set-key (kbd "M-g M-s") 'magit-status)
  (global-set-key (kbd "M-g M-c") 'magit-checkout)
#+end_src
*** Auto-hide Compilation Buffer
#+begin_src emacs-lisp :tangle yes
(defun bury-compile-buffer-if-successful (buffer string)
 "Bury a compilation BUFFER if succeeded without warnings (STRING has finished)."
 (when (and
	(buffer-live-p buffer)
	(string-match "compilation" (buffer-name buffer))
	(string-match "finished" string)
	(not
	 (with-current-buffer buffer
	   (goto-char (point-min))
	   (search-forward "warning" nil t))))
    (run-with-timer 1 nil
		    (lambda (buf)
		      (bury-buffer buf)
		      (switch-to-prev-buffer (get-buffer-window buf) 'kill))
		    buffer)))
(add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
#+end_src
*** clang format
#+begin_src emacs-lisp :tangle yes
(require 'clang-format)
(global-set-key (kbd "C-M-TAB") 'clang-format-region)
#+end_src
* Inspiring Quotes
** 
#+BEGIN_QUOTE
When large numbers of nontechnical workers are using a programmable
editor, they will be tempted constantly to begin programming in the
course of their day-to-day lives. This should contribute greatly to
computer literacy, especially because many of the people thus exposed
will be secretaries taught by society that they are incapable of doing
mathematics, and unable to imagine for a moment that they can learn to
program. But that won't stop them from learning it if they don't know
that it is programming that they are learning! -- Richard Stallman
#+END_QUOTE
** 
#+BEGIN_QUOTE
Consider the way a puddle of water finds a drain, or better yet how
ants find food: exploration essentially by diffusion, followed by
exploitation mediated by a scalable communication mechanism -- Eric S
Raymond, in CatB
#+END_QUOTE

* Init File Stuff
** Tangle init org file
#+begin_src emacs-lisp :tangle yes
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "config.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "config.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+end_src
** Open init file by default
#+begin_src emacs-lisp :tangle yes
  (find-file "~/.emacs.d/config.org")
#+end_src
